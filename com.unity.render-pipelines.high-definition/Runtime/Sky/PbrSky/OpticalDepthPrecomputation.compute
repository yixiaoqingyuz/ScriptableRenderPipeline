#pragma enable_d3d11_debug_symbols
#pragma only_renderers d3d11 ps4 xboxone vulkan metal switch
#pragma kernel main

#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Sky/PbrSky/PbrSkyCommon.hlsl"

#define sec(x) rcp(cos(x))
#define TABLE_SIZE uint2(PBRSKYCONFIG_OPTICAL_DEPTH_TABLE_SIZE_X, \
                         PBRSKYCONFIG_OPTICAL_DEPTH_TABLE_SIZE_Y)

RW_TEXTURE2D(float2, _OpticalDepthTable); // of TABLE_SIZE

// For (chi == Pi/2).
// We use the following (very good) approximation:
// "Approximation to the Chapman Grazing-Incidence Function for Atmospheric Scattering" by C. Schueler.
float ChapmanHorizontal(float x)
{
    float r = rsqrt(x);
    float s = x * r; // sqrt(x)

    return 0.62665707 * (r + 2 * s);
}

// For (chi < Pi/2).
// We use the following approximation as a starting point:
// "An approximate form for the Chapman grazing incidence function" by Titheridge, J. E.
// We perform the re-fit to achieve higher accuracy.
float ChapmanUpper(float x, float cosChi)
{
    float chi = acos(cosChi);

    float a = 1.00205 - 1.3033 * rsqrt(x);
    float b = sec(chi * a);
    float c = -1.55507 + 2.37522 * b;
    float d = c * pow(abs(x), -1.05644);

    return sec(chi - d);
}

float ChapmanFunction(float x, float cosChi)
{
    // cos(Pi - chi) = -cos(chi).
    float cu = ChapmanUpper(x, abs(cosChi));

    if (cosChi < 0)
    {
        // Ch(x, chi) = 2 * exp(x - x * sin(chi)) * Ch(x * sin(chi), Pi/2) - Ch(x, Pi - chi).
        float z = x * sqrt(1 - cosChi * cosChi);
        float a = exp(x - z);
        float b = 2 * ChapmanHorizontal(z);

        cu = a * b - cu;
    }

    return cu;
}

[numthreads(8, 8, 1)]
void main(uint2 dispatchThreadId : SV_DispatchThreadID)
{
    const float2 scale = rcp(TABLE_SIZE);
    const float2 bias  = 0.5 * scale;

    // Let the hardware and the driver handle the ordering of the computation.
    uint2 tableCoord = dispatchThreadId;

    // We don't care about the extremal points (boundary values).
    float2 uv = tableCoord * scale + bias;

    // The table only contains data for directions pointing above the horizon.
    float cosChi = UnmapAerialPerspectiveAboveHorizon(uv).x;
    float height = UnmapAerialPerspectiveAboveHorizon(uv).y;

    float R = _PlanetaryRadius;
    float h = height;
    float r = R + h;

    // F = 1 / S.
    float2 S = float2(_AirScaleHeight,    _AerosolScaleHeight);
    float2 F = float2(_AirDensityFalloff, _AerosolDensityFalloff);

    // Now we need to compute the optical depth along the ray.
    // It is given as the integral of the extinction (atmospheric thickness) along the ray.
    //
    // Density[h]    = Exp[-h / S]
    // Extinction[h] = Extinction[0] * Density[h]
    //
    // AtmosphericExtinction[h] = Extinction_Air[h] + Extinction_Aerosol[h]
    //
    // For now, assume that no intersection with the planet occurred.
    //
    // OpticalDepth = Integrate[Extinction[h[t]], {t, 0, Infinity}]
    // OpticalDepth = Integrate[Extinction[0] * Exp[-h[t] / S], {t, 0, Infinity}]
    // OpticalDepth = Extinction[0] * Integrate[Exp[-h[t] / S], {t, 0, Infinity}]
    // OpticalDepth = Extinction[0] * Integrate[Exp[(R - Sqrt[(r * Sin[chi])^2 + t^2]) / S], {t, r * Cos[chi], Infinity}]
    // OpticalDepth = Extinction[0] * S * Exp[(R - r) / S] * Integrate[Exp[(r - Sqrt[(r * Sin[chi])^2 + t^2]) / S] / S, {t, r * Cos[chi], Infinity}]
    // By defining (x = r / S) and (s = t / S), we get:
    // OpticalDepth = Extinction[0] * S * Exp[(R - r) / S] * Integrate[Exp[x - Sqrt[(x * Sin[chi])^2 + s^2]], {s, x * Cos[chi], Infinity}]
    // OpticalDepth = Extinction[0] * S * Exp[(R - r) / S] * Integrate[Exp[x - Sqrt[s^2 + 2 * s * (x * Cos[chi]) + x^2]], {s, 0, Infinity}]
    // OpticalDepth = Extinction[0] * S * Exp[(R - r) / S] * ChapmanFunction[x, chi]
    //
    // Another way to look at this expression is as follows:
    //
    // ColumnMass[h] = Integrate[Density[t],  {t, h, Infinity}]
    // ColumnMass[h] = Integrate[Exp[-t / S], {t, h, Infinity}]
    // ColumnMass[h] = S * Exp[-h / S]
    //
    // OpticalDepth = Extinction[0] * ColumnMass[h] * ObliquityFunction[x, chi]
    //
    // For more information, see
    // "Approximation to the Chapman Grazing-Incidence Function for Atmospheric Scattering" and
    // "Functional Forms for Approximating the Relative Optical Air Mass".
    //
    // To save on the storage, we will scale by the sea level thickness at runtime.

    float2 tableEntry;

    tableEntry.x = S.x * exp(-h * F.x) * ChapmanFunction(r * F.x, cosChi);
    tableEntry.y = S.y * exp(-h * F.y) * ChapmanFunction(r * F.y, cosChi);

    _OpticalDepthTable[tableCoord] = tableEntry;
}
